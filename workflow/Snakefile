from Bio import SeqIO

genomes = [
    "annuum",
    "candolleanum",
    "etuberosum",
    "lycopersicum",
    "tuberosum_phureja_E4_63",
    "tuberosum_tuberosum_RH10_15",
    "chilense",
    "galapagense",
    "neorickii",
    "tuberosum_phureja_E86_69",
    "tuberosum_tuberosum_RH",
    "chmielewskii",
    "habrochaites",
    "peruvianum",
    "tuberosum_stenotomum_A6_26",
    "verrucosum",
    "corneliomulleri",
    "lycopersicoides",
    "pimpinellifolium",
    "tuberosum_stenotomum_PG6359",
]

rule all:
    input:
        "results/orthofinder/Phylogenetic_Hierarchical_Orthogroups/N0.tsv",
        expand("results/resistify/{genome}/results.tsv", genome = genomes),
        expand("results/edta/{genome}.mod.EDTA.TEanno.gff3", genome = genomes),
        expand("results/intersect/{genome}.bed", genome = genomes),
        expand("results/edta/{genome}_intact_terminal.tsv", genome = genomes),
        expand("results/refplantnlr/{genome}.txt", genome = genomes)

rule helixer:
    input:
        "genomes/{genome}.fa"
    output:
        "results/helixer/{genome}.gff"
    threads: 4
    resources:
        mem_mb = 16000,
        partition = "gpu",
        slurm = "gpus=1"
    shell:
        """
        singularity exec --nv -H $PWD "$APPS/helixer-docker_helixer_v0.3.0_cuda_11.2.0-cudnn8.sif" Helixer.py \
        --species {wildcards.genome} \
        --fasta-path {input} \
        --gff-output-path {output} \
        --model-filepath "helixer_model/land_plant_v0.3_a_0080.h5"
        """

rule get_bed:
    input:
        "results/helixer/{genome}.gff"
    output:
        "results/bed/{genome}.bed"
    conda:
        "envs/agat.yml"
    threads: 1
    resources:
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        agat_convert_sp_gff2bed.pl \
        --gff {input} \
        -o {output}

        awk -i inplace '{{OFS="\t"; print $1, $2, $3, $4}}' {output}
        """

rule get_peptide:
    input:
        genome = "genomes/{genome}.fa",
        gff = "results/helixer/{genome}.gff"
    output:
        "results/fasta/{genome}.fa"
    conda:
        "envs/agat.yml"
    threads: 1
    resources:
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        agat_sp_extract_sequences.pl \
        --cfs \
        -g {input.gff} \
        -f {input.genome} \
        -p -o {output}
        """

rule clean_peptide:
    input:
        "results/fasta/{genome}.fa"
    output:
        "results/peptide/{genome}.fa"
    run:
        # remove any description from the fasta file
        with open(input[0], "r") as infile, open(output[0], "w") as outfile:
            for record in SeqIO.parse(infile, "fasta"):
                record.description = ""
                SeqIO.write(record, outfile, "fasta")

rule resistify:
    input:
        "results/peptide/{genome}.fa"
    output:
        "results/resistify/{genome}/results.tsv"
    conda:
        "envs/resistify.yml"
    threads: 4
    resources:
        mem_mb = 8000,
        partition = "medium"
    shell:
        """
        resistify {input} results/resistify/{wildcards.genome}
        """

rule orthofinder:
    input:
        expand("results/peptide/{genome}.fa", genome = genomes)
    output:
        "results/orthofinder/Phylogenetic_Hierarchical_Orthogroups/N0.tsv"
    conda:
        "envs/orthofinder.yml"
    threads: 16
    resources:
        mem_mb = 32000,
        partition = "medium"
    shell:
        """
        rm -rf results/orthofinder
        mkdir -p results/orthofinder
        # orthofinder does some really stupid directory naming so have to do this
        orthofinder -t 16 -f results/peptide -o $TMPDIR/temp_orthofinder
        mv $TMPDIR/temp_orthofinder/*/* results/orthofinder
        rm -r $TMPDIR/temp_orthofinder
        """

rule edta:
    input:
        genome = "genomes/{genome}.fa"
    output:
        "results/edta/{genome}.mod.EDTA.TEanno.gff3"
    conda:
        "envs/edta.yml"
    threads: 8
    resources:
        mem_mb = 64000,
        partition = "long"
    shell:
        """
        # get absolute path of EDTA.pl
        EDTA_PATH=$(readlink -f EDTA/EDTA.pl)
        cp {input.genome} $TMPDIR/{wildcards.genome}
        cd $TMPDIR
        perl $EDTA_PATH \
        --threads {threads} \
        --genome {wildcards.genome} \
        --anno 1 \
        --overwrite 1
        cd -
        cp -r $TMPDIR/{wildcards.genome}* results/edta
        """

rule retrieve_bed:
    input:
        gff = "results/helixer/{genome}.gff"
    output:
        output = "results/helixer/{genome}.bed"
    conda:
        "envs/agat.yml"
    shell:
        "agat_convert_sp_gff2bed.pl --gff {input.gff} --out {output.output}"

rule bed_intersect:
    input:
        gene_bed = "results/helixer/{genome}.bed",
        edta_gff = "results/edta/{genome}.mod.EDTA.intact.gff3"
    output:
        "results/intersect/{genome}.bed"
    conda:
        "envs/bedtools.yml"
    shell:
        "bedtools intersect -f 0.9 -wo -a {input.gene_bed} -b {input.edta_gff} > {output}"
    
rule extract_te_terminal:
    input:
        fasta = "results/edta/{genome}.mod.EDTA.final/{genome}.mod.EDTA.intact.fa"
    output:
        table = "results/edta/{genome}_intact_terminal.tsv"
    run:
        with open(input.fasta, "r") as infile, open(output.table, "w") as outfile:
            for record in SeqIO.parse(infile, "fasta"):
                # extract 30bp from the start and end of the sequence
                try:
                    start = record.seq[:30]
                    end = record.seq[-30:]
                    outfile.write(f"{record.id}\t{start}\t{end}\n")
                except IndexError:
                    # if sequence is less than 60bp, ignore it
                    pass
                
rule refplantnlr_blast:
    input:
        peptide = "results/peptide/{genome}.fa",
        refplantnlr = "refplantnlr.fa"
    output:
        result = "results/refplantnlr/{genome}.txt"
    conda:
        "envs/blast.yml"
    threads: 1
    resources:
        mem_mb = 4000,
        partition = "short"
    shell:
        "blastp -subject {input.peptide} -query {input.refplantnlr} -outfmt 6 -out {output.result}"